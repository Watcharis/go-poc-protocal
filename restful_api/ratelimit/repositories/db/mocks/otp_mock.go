// Code generated by MockGen. DO NOT EDIT.
// Source: db/otp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "watcharis/go-poc-protocal/restful_api/ratelimit/models"

	gomock "github.com/golang/mock/gomock"
)

// MockOtpRepository is a mock of OtpRepository interface.
type MockOtpRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOtpRepositoryMockRecorder
}

// MockOtpRepositoryMockRecorder is the mock recorder for MockOtpRepository.
type MockOtpRepositoryMockRecorder struct {
	mock *MockOtpRepository
}

// NewMockOtpRepository creates a new mock instance.
func NewMockOtpRepository(ctrl *gomock.Controller) *MockOtpRepository {
	mock := &MockOtpRepository{ctrl: ctrl}
	mock.recorder = &MockOtpRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpRepository) EXPECT() *MockOtpRepositoryMockRecorder {
	return m.recorder
}

// CreateOtp mocks base method.
func (m *MockOtpRepository) CreateOtp(ctx context.Context, data models.OtpDB) (models.OtpDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtp", ctx, data)
	ret0, _ := ret[0].(models.OtpDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtp indicates an expected call of CreateOtp.
func (mr *MockOtpRepositoryMockRecorder) CreateOtp(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtp", reflect.TypeOf((*MockOtpRepository)(nil).CreateOtp), ctx, data)
}

// GetOtp mocks base method.
func (m *MockOtpRepository) GetOtp(ctx context.Context, uuid, otp string) (models.OtpDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtp", ctx, uuid, otp)
	ret0, _ := ret[0].(models.OtpDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtp indicates an expected call of GetOtp.
func (mr *MockOtpRepositoryMockRecorder) GetOtp(ctx, uuid, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtp", reflect.TypeOf((*MockOtpRepository)(nil).GetOtp), ctx, uuid, otp)
}
